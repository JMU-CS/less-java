#!/usr/bin/env bash
# vim: set filetype=bash

GRADLE_WRAPPER="./gradlew"

help() {
    echo "Usage: $0 [options] file"
    echo ""
    echo "  Options:"
    echo "    -r  Compile and run the program without testing"
    echo "    -x  Compile and test the program without running"
    echo "    -h  Print this help message and exit"
    echo "    -t  Print type changes found by type inference"
    echo "    -v  Print output from Gradle"
}

args="run"
verbose=false
running=true
testing=true
while getopts :thv flag; do
  case $flag in
    r)
      testing=false
      ;;
    x)
      running=false
      ;;
    h)
      help
      exit
      ;;
    t)
      args="${args} -PprintTypeChanges"
      ;;
    v)
      verbose=true
      ;;
    \?)
      echo "Unrecognized option $OPTARG" 1>&2
      echo
      help
      exit
      ;;
  esac
done
shift $((OPTIND - 1))

if ! $verbose; then
  args="${args} -q"
fi

if [ $# == 0 ]; then
  echo "Expecting a file" 1>&2
  echo
  help
  exit
fi

args="${args} -Ptestfile=${1}"
"$GRADLE_WRAPPER" $args
compile_status="$?"
if [ "$compile_status" -gt "0" ]; then
    exit 
fi

if $testing; then
    # --class-path allows specifying where JUnit should look for tests
    # --include-classname allows the name to be anything
    # --disable-banner disables the banner asking contributing to JUnit
    # --scan-class-path checks the full classpath for tests
    # Get the output but do not print it yet
    test_output="$(java -jar libs/junit-platform-console-standalone-1.4.2.jar --class-path ".:generated" --include-classname='.*' --disable-banner --scan-class-path)"
    # Preserve  the exit code of the tests
    test_status="$?"

    # The grep -v filter removes lines that are unnecessary or potentially
    #    confusing to an end user.
    echo "$test_output" | grep -v -e '\[.*containers.*\]' -e 'JUnit Vintage' -e 'Test run finished after'

    # Ensure the exit code from the tests is the exit code of the script
    if [ "$test_status" -gt "0" ]; then
        exit 1
    fi
fi

if $running; then
    # IF the less-java file contains the string "main()", attempt to run it.
    # Otherwise, release a warning and continue
    parent=$(dirname $1)
    base=$(basename $1)
    name=${base%.*}
    count=$(grep -c "main()" "$1")
    if [ "$count" -gt "0" ]; then
        if [ -e "$parent/$name.in" ]; then
            java -cp generated Main < "$parent/$name.in"
        else
            java -cp generated Main
        fi
    else
        echo "Warning: This program does not contain a main() function and will not be run."
    fi
fi
