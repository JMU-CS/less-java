// add : (int, int) -> int
add(a, b) {
    return a + b
}

test add(1, 2) == 3

// eq : ForAll a, (a, a) -> bool
eq(a, b) {
    return a == b
}

test eq(1, 1)
test !eq(1, 2)
test eq("a", "a")
test !eq("a", "b")

// eqBIsTrue : (bool, bool, bool, bool) -> bool
eqBIsTrue(a, b, c, d) {
    return a == b && c == d && b == true && b == c
}

test eqBIsTrue(true, true, true, true)
test !eqBIsTrue(true, false, true, true)

// eqDIsTrue : (bool, bool, bool, bool) -> bool
eqDIsTrue(a, b, c, d) {
    return a == b && c == d && b == c && b == true
}

test eqDIsTrue(true, true, true, true)
test !eqDIsTrue(true, true, true, false)

// eqComposite: ForAll a, ForAll b, (a, a, b, b) -> bool
eqComposite(a, b, c, d) {
    return eq(a, b) && eq(c, d)
}

test eqComposite(1, 1, "a", "a")
test eqComposite("a", "a", 1, 1)
test eqComposite(1, 1, 1, 1)
test eqComposite("a", "a", "a", "a")
test !eqComposite(1, 2, 3, 4)
test !eqComposite("a", "b", "c", "d")

// eqCompositeConstrained: ForAll a, (a, a, a) -> bool
eqCompositeConstrained(a, b, c) {
    return eq(a, b) && eq(b, c)
}

test eqCompositeConstrained(1, 1, 1)
test eqCompositeConstrained("a", "a", "a")
test !eqCompositeConstrained(1, 2, 3)
test !eqCompositeConstrained("a", "b", "c")

// compareToTen : (int) -> bool
compareToTen(c) {
    return c == 10
}

test compareToTen(10)
test !compareToTen(11)
